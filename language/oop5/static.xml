<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a9edd62d087ab1eb6292c795b7256e14ff9f1234 Maintainer: shein Status: ready -->
<!-- Reviewed: yes -->
<!-- $Revision$ -->
<sect1 xml:id="language.oop5.static" xmlns="http://docbook.org/ns/docbook">
 <title>Ключевое слово static</title>

 <tip>
  <simpara>
   Эта страница описывает использование ключевого слова
   <literal>static</literal>
   для определения статических методов и свойств. <literal>static</literal> также
   может использоваться для <link linkend="language.variables.scope.static">определения
   статических переменных
  </link> и <link linkend="language.oop5.late-static-bindings">
   позднего статического связывания</link>. Для получения информации о таком применении
   ключевого слова <literal>static</literal> обратитесь по вышеуказанным страницам.
  </simpara>
 </tip>

 <para>
  Объявление свойств и методов класса статическими позволяет обращаться к ним
  без создания экземпляра класса. Свойство класса, объявленное как статическое,
  не может быть доступно посредством экземпляра класса (но статический метод
  может быть вызван).
 </para>

 <sect2 xml:id="language.oop5.static.methods">
  <title>Статические методы</title>
  <para>
   Так как статические методы вызываются без создания экземпляра класса,
   то псевдопеременная <varname>$this</varname> недоступна внутри метода,
   объявленного как статический.
  </para>

  <warning>
   <para>
    Вызов нестатических методов статически вызывает ошибку <classname>Error</classname>.
   </para>
   <para>
    До PHP 8.0.0 вызов нестатических методов статически был объявлен устаревшим
    и вызывал ошибку уровня <constant>E_DEPRECATED</constant>.
    </para>
  </warning>

  <example>
   <title>Пример статического метода</title>
   <programlisting role="php">
    <![CDATA[
<?php
class Foo {
    public static function aStaticMethod() {
        // ...
    }
}

Foo::aStaticMethod();
$classname = 'Foo';
$classname::aStaticMethod();
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.static.properties">
  <title>Статические свойства</title>
  <para>
   Статические свойства не могут быть доступны через объект с помощью оператора "-&gt;".
  </para>
  <para>
   Как и любая другая статическая переменная PHP, статические свойства
   могут инициализироваться по тем же правилам, что и выражения &const;:
   возможны некоторые выражения, если они могут быть вычислены
   во время компиляции.
  </para>

  <para>
   На класс можно ссылаться с помощью переменной.
   Значение переменной в таком случае не может быть ключевым
   словом (например, <literal>self</literal>, <literal>parent</literal> и
   <literal>static</literal>).
  </para>

  <example>
   <title>Пример статического свойства</title>
   <programlisting role="php">
    <![CDATA[
<?php
class Foo
{
    public static $my_static = 'foo';

    public function staticValue() {
        return self::$my_static;
    }
}

class Bar extends Foo
{
    public function fooStatic() {
        return parent::$my_static;
    }
}


print Foo::$my_static . "\n";

$foo = new Foo();
print $foo->staticValue() . "\n";
print $foo->my_static . "\n";      // Не определено свойство my_static

print $foo::$my_static . "\n";
$classname = 'Foo';
print $classname::$my_static . "\n";

print Bar::$my_static . "\n";
$bar = new Bar();
print $bar->fooStatic() . "\n";
?>
]]>
   </programlisting>
  </example>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
